// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/author": {
            "post": {
                "description": "Создаёт нового автора с указанными данными. Принимает JSON-представление автора и возвращает созданную запись.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Create a new author",
                "parameters": [
                    {
                        "description": "Параметры для создания автора. Пример: {\\",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_authors.CreateAuthorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Новый автор с уникальным ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/author/{id}": {
            "get": {
                "description": "Возвращает данные автора по его уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Get an author by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID автора",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация об авторе",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Автор не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные существующего автора по его уникальному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Update an author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID автора",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новые данные автора. Пример: {\\",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_authors.UpdateAuthorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновлённые данные автора",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет автора по его уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Delete an author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID автора",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Автор успешно удалён",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/authors": {
            "get": {
                "description": "Возвращает список всех авторов, зарегистрированных в системе.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "List all authors",
                "responses": {
                    "200": {
                        "description": "Массив объектов авторов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/book": {
            "post": {
                "description": "Создаёт новую книгу в системе. Принимает данные книги в формате JSON и возвращает созданную запись.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Create a new book",
                "parameters": [
                    {
                        "description": "Параметры для создания книги. Пример: {\\",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_bookshandlers.CreateBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Созданная книга с её уникальным ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса или отсутствуют обязательные поля",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/book/{id}": {
            "get": {
                "description": "Возвращает данные книги по её уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Retrieve a book by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID книги",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные книги",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Книга не найдена",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные книги по её уникальному идентификатору. Принимает новые данные книги в формате JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Update a book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID книги",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления книги. Пример: {\\",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_bookshandlers.UpdateBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновлённые данные книги",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет книгу из системы по её уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Delete a book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID книги",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сообщение об успешном удалении",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books": {
            "get": {
                "description": "Возвращает список всех книг, хранящихся в системе. Если указан параметр \"author\", возвращаются книги только этого автора. Дополнительно можно задать параметры сортировки: \"sort\" (поле сортировки) и \"order\" (asc или desc).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "List all books",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID автора для фильтрации (например, 5)",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Поле для сортировки (например, 'title', 'year')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Порядок сортировки: 'asc' или 'desc' (по умолчанию: asc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Массив книг",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Аутентифицирует пользователя по email и паролю. При неверном пароле возвращает ошибку Unauthorized.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "readers"
                ],
                "summary": "Authenticate reader",
                "parameters": [
                    {
                        "description": "Данные для аутентификации. Пример: {\\",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_readers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная аутентификация: данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверный пароль или пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reader": {
            "post": {
                "description": "Создаёт нового читателя с предоставленными данными.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "readers"
                ],
                "summary": "Create a new reader",
                "parameters": [
                    {
                        "description": "Параметры для создания читателя. Пример: {\\",
                        "name": "reader",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_readers.CreateReaderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Созданный читатель с уникальным ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reader/{id}": {
            "get": {
                "description": "Возвращает данные читателя по его уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "readers"
                ],
                "summary": "Get a reader by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID читателя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные читателя",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Читатель не найден",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные существующего читателя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "readers"
                ],
                "summary": "Update a reader",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID читателя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новые данные читателя. Пример: {\\",
                        "name": "reader",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_readers.UpdateReaderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновлённые данные читателя",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет читателя по его уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "readers"
                ],
                "summary": "Delete a reader",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Уникальный ID читателя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Читатель успешно удалён",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/readers": {
            "get": {
                "description": "Возвращает список всех читателей.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "readers"
                ],
                "summary": "List all readers",
                "responses": {
                    "200": {
                        "description": "Список читателей",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reservation": {
            "put": {
                "description": "Обновляет данные существующего бронирования.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Update reservation",
                "parameters": [
                    {
                        "description": "Reservation update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_reservations.UpdateReservationRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Бронирование обновлено успешно",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создаёт новое бронирование в системе.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Create a new reservation",
                "parameters": [
                    {
                        "description": "Reservation creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_application_http_handlers_reservations.CreateReservationRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Бронирование создано успешно",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reservation/{id}": {
            "get": {
                "description": "Возвращает бронирование по его уникальному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Get reservation by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные бронирования",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет бронирование по его идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Delete reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Бронирование удалено успешно",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reservations": {
            "get": {
                "description": "Возвращает список бронирований в указанном диапазоне дат.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "List reservations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список бронирований",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_0sokrat0_BookAPI_pkg_response.BaseResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "github_com_0sokrat0_BookAPI_pkg_response.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "internal_application_http_handlers_authors.CreateAuthorRequest": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "example": "Russia"
                },
                "name": {
                    "type": "string",
                    "example": "Leo Tolstoy"
                }
            }
        },
        "internal_application_http_handlers_authors.UpdateAuthorRequest": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "example": "Russia"
                },
                "name": {
                    "type": "string",
                    "example": "Anton Chekhov"
                }
            }
        },
        "internal_application_http_handlers_bookshandlers.CreateBookRequest": {
            "type": "object",
            "properties": {
                "author_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "genre": {
                    "type": "string",
                    "example": "Programming"
                },
                "isbn": {
                    "type": "string",
                    "example": "1234567890"
                },
                "title": {
                    "type": "string",
                    "example": "Go Programming"
                },
                "year": {
                    "type": "integer",
                    "example": 2025
                }
            }
        },
        "internal_application_http_handlers_bookshandlers.UpdateBookRequest": {
            "type": "object",
            "properties": {
                "author_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "genre": {
                    "type": "string",
                    "example": "Programming"
                },
                "isbn": {
                    "type": "string",
                    "example": "0987654321"
                },
                "title": {
                    "type": "string",
                    "example": "Advanced Go"
                },
                "year": {
                    "type": "integer",
                    "example": 2025
                }
            }
        },
        "internal_application_http_handlers_readers.CreateReaderRequest": {
            "type": "object",
            "properties": {
                "admin": {
                    "type": "boolean",
                    "example": false
                },
                "email": {
                    "type": "string",
                    "example": "ivan@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "Ivan Ivanov"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+79111234567"
                }
            }
        },
        "internal_application_http_handlers_readers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ivan@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "internal_application_http_handlers_readers.UpdateReaderRequest": {
            "type": "object",
            "properties": {
                "admin": {
                    "type": "boolean",
                    "example": false
                },
                "email": {
                    "type": "string",
                    "example": "ivan@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "Ivan Ivanov"
                },
                "password": {
                    "type": "string",
                    "example": "newpassword"
                },
                "phone": {
                    "type": "string",
                    "example": "+79111234567"
                }
            }
        },
        "internal_application_http_handlers_reservations.CreateReservationRequestDTO": {
            "type": "object",
            "properties": {
                "book_id": {
                    "description": "Идентификатор книги",
                    "type": "integer"
                },
                "end_date": {
                    "description": "Окончание бронирования",
                    "type": "string"
                },
                "id": {
                    "description": "Если ID генерируется базой, можно опустить",
                    "type": "integer"
                },
                "reader_id": {
                    "description": "Идентификатор читателя",
                    "type": "integer"
                },
                "start_date": {
                    "description": "Начало бронирования",
                    "type": "string"
                }
            }
        },
        "internal_application_http_handlers_reservations.UpdateReservationRequestDTO": {
            "type": "object",
            "properties": {
                "book_id": {
                    "type": "integer"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "reader_id": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Book API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
